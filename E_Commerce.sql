CREATE DATABASE ecommerce;

CREATE TABLE products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(50),
  category VARCHAR(50),
  price DECIMAL(10,2),
  description TEXT
);

CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  email VARCHAR(50),
  phone VARCHAR(20),
  address VARCHAR(100),
  city VARCHAR(50),
  state VARCHAR(50),
  zip VARCHAR(10)
);

CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT,
  order_date DATE,
  status VARCHAR(20),
  total DECIMAL(10,2),
  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

CREATE TABLE order_details (
  order_detail_id INT PRIMARY KEY,
  order_id INT,
  product_id INT,
  quantity INT,
  price DECIMAL(10,2),
  FOREIGN KEY (order_id) REFERENCES orders(order_id),
  FOREIGN KEY (product_id) REFERENCES products(product_id)
);

INSERT INTO products (product_id, product_name, category, price, description) VALUES
(1, 'Apple iPhone XR', 'Electronics', 749.99, '6.1-inch Liquid Retina display, A12 Bionic chip, Face ID'),
(2, 'Samsung Galaxy S10', 'Electronics', 899.99, '6.1-inch AMOLED display, Snapdragon 855, in-display fingerprint scanner'),
(3, 'Sony PlayStation 5', 'Gaming', 499.99, '4K gaming and entertainment, lightning-fast loading times, haptic feedback'),
(4, 'Microsoft Xbox Series X', 'Gaming', 499.99, '4K gaming, 120 FPS, faster load times'),
(5, 'Apple MacBook Air', 'Computers', 999.99, '13.3-inch Retina display, M1 chip, 18-hour battery life');

INSERT INTO customers (customer_id, first_name, last_name, email, phone, address, city, state, zip) VALUES
(1, 'John', 'Doe', 'johndoe@example.com', '555-123-4567', '123 Main St', 'Anytown', 'CA', '12345'),
(2, 'Jane', 'Doe', 'janedoe@example.com', '555-987-6543', '456 Elm St', 'Otherville', 'NY', '54321');

INSERT INTO orders (order_id, customer_id, order_date, status, total) VALUES
(1, 1, '2023-04-30', 'Shipped', 1749.98),
(2, 2, '2023-05-01', 'Processing', 999.99);

INSERT INTO order_details (order_detail_id, order_id, product_id, quantity, price) VALUES
(1, 1, 1, 1, 749.99),
(2, 1, 2, 1, 999.99),
(3, 2, 5, 1, 999.99);

select * from products;
select * from orders;
select * from customers;
select * from order_details;

-- Find the total revenue generated by each product category

SELECT category, SUM(total) as revenue
FROM orders
JOIN order_details ON orders.order_id = order_details.order_id
JOIN products ON order_details.product_id = products.product_id
GROUP BY category;

-- Find the top 5 customers who spent the most amount of money

SELECT customers.customer_id, CONCAT(customers.first_name, ' ', customers.last_name) as customer_name, SUM(total) as total_spent
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY customers.customer_id
ORDER BY total_spent DESC
LIMIT 5;

-- Find the products that were ordered but not yet shipped.

SELECT products.product_name, order_details.quantity, orders.status
FROM order_details
JOIN orders ON order_details.order_id = orders.order_id
JOIN products ON order_details.product_id = products.product_id
WHERE orders.status != 'Shipped';

-- Find the total number of orders placed in the current month.

SELECT COUNT(*) as num_orders
FROM orders
WHERE MONTH(order_date) = MONTH(CURRENT_DATE())
AND YEAR(order_date) = YEAR(CURRENT_DATE());

-- Find the top 3 selling products in terms of quantity.

SELECT products.product_name, SUM(order_details.quantity) as total_quantity_sold
FROM order_details
JOIN products ON order_details.product_id = products.product_id
GROUP BY products.product_name
ORDER BY total_quantity_sold DESC
LIMIT 3;

-- Find the customers who have placed orders in the last 30 days.

SELECT customers.first_name, customers.last_name, MAX(orders.order_date) as last_order_date
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
WHERE orders.order_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
GROUP BY customers.customer_id;
